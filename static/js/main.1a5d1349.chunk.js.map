{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","className","src","id","alt","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0OAaeA,EAZJ,SAACC,GAAU,IACXC,EAAYD,EAAZC,KAAKC,EAAOF,EAAPE,MACZ,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAG,+BAA0BJ,EAAMK,GAAhC,YAA8CC,IAAI,WAC1D,6BACI,4BAAKL,GACL,2BAAIC,MCILK,EAVA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACPC,EAAUD,EAAOE,KAAI,SAACC,EAAKC,GAC7B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGP,GAAIG,EAAOI,GAAGP,GAAIJ,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,WAElF,OACI,6BACKO,ICCEK,EARC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACd,OACI,yBAAKZ,UAAU,OACf,2BAAOA,UAAU,mCAAmCa,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCUjGI,EATA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,UAC1DvB,EAAMwB,WC0CJC,G,wDA5CX,aAAc,IAAD,8BACT,gBAgBJC,eAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAhBxC,EAAKC,MAAM,CACPxB,OAAO,GACPqB,YAAY,IAJP,E,gEAQO,IAAD,OACfI,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GAEJ,EAAKT,SAAS,CAACpB,OAAO6B,S,+BAQrB,IAAD,OACEC,EAAeC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GAC1C,OAAOA,EAAOP,KAAKwC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAGrE,OAA8B,IAA3BF,KAAKP,MAAMxB,OAAOmC,OACV,2CAGP,yBAAKxC,UAAU,MACX,wBAAIA,UAAU,MAAd,eAGA,kBAAC,EAAD,CAAWY,aAAcwB,KAAKb,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUlB,OAAQ8B,U,GArCnBM,cCOCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1a5d1349.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card=(props)=> {\r\n    const {name,email}=props;\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow'>\r\n            <img src={`https://robohash.org/${props.id}?200*200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList=({robots})=>{\r\n    const cardArray=robots.map((user,i)=>{\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n    })\r\n    return(\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\nconst SearchBox=({searchChange})=>{\r\n    return(\r\n        <div className='pa2'>\r\n        <input className='pa3 ba b--green bg-lightest-blue' type=\"search\" placeholder=\"search robots\" onChange={searchChange}/>\r\n        </div>//onChange is an event when we search anything in the search box,can google\r\n      \r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n/*\r\nhere we are rendering the child of scroll which is CardList\r\nand in style 1->{} shows javascript expression ,2nd->jsx\r\n*/\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflow:'scroll',border:'5px solid black',height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n       \r\n    );\r\n   \r\n};\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\nclass  App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:[],\r\n            searchfield:''\r\n        }\r\n    }\r\n    //AJAX\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=>{\r\n            return response.json();\r\n        }).then(users=>{\r\n            //make empty to check what if api take longer tome to response\r\n            this.setState({robots:users})\r\n        });\r\n        \r\n    }\r\n    onSearchChange=(event)=>{\r\n        this.setState({searchfield:event.target.value})\r\n       \r\n    }\r\n    render(){\r\n        const filteredRobots=this.state.robots.filter(robots=>{\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        //what if an api take more time to give response\r\n        if(this.state.robots.length===0){\r\n            return <h1>Loading....</h1>\r\n        }else{\r\n    return(\r\n            <div className='tc'>\r\n                <h1 className='f1'>\r\n                RoboFriends\r\n                </h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots={filteredRobots}/>\r\n                </Scroll>\r\n            </div>\r\n        \r\n        );\r\n    }\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//robots.js is for reference purpose\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n  <App/>   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}